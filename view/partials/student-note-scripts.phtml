
function connectRemoveIcon(id, target)
{
	$('#' + id).click(function () {
		$('#' + target).hide();
		$('.progress-detail-anchor').removeClass('btn-primary').addClass('btn-default');
	});
}

function getParams() {

	var params = '?', todo = true;

<?php foreach ($context->getConfig('note/search')['main'] as $propertyId => $rendering) : ?>

	<?php if ($rendering == 'range' || $rendering == 'date') : ?>
	
	var min_<?php echo $propertyId ?> = document.getElementById('search_min_<?php echo $propertyId ?>').value;
	if (min_<?php echo $propertyId ?>) min_<?php echo $propertyId ?> = encodeDate(min_<?php echo $propertyId ?>);
	if (min_<?php echo $propertyId ?>.length >= 2) { params += 'min_<?php echo $propertyId ?>=' + min_<?php echo $propertyId ?> + '&'; todo = false; }

	var max_<?php echo $propertyId ?> = document.getElementById('search_max_<?php echo $propertyId ?>').value;
	if (max_<?php echo $propertyId ?>) max_<?php echo $propertyId ?> = encodeDate(max_<?php echo $propertyId ?>);
	if (max_<?php echo $propertyId ?>.length >= 2) { params += 'max_<?php echo $propertyId ?>=' + max_<?php echo $propertyId ?> + '&'; todo = false; }

	<?php else : ?>

	var prop_<?php echo $propertyId ?> = document.getElementById('search_<?php echo $propertyId ?>').value;
	if (prop_<?php echo $propertyId ?>.length >= 2) { params += '<?php echo $propertyId ?>=' + prop_<?php echo $propertyId ?> + '&'; todo = false; }
	
	<?php endif;?>

<?php endforeach;?>

	<?php
	$todoTitle = (isset ($context->getConfig('note/search')['todoTitle']) ? $context->getConfig('note/search')['todoTitle'][$context->getLocale()] : $this->translate('active', 'ppit-core', $context->getLocale()));
	$searchTitle = (isset ($context->getConfig('note/search')['searchTitle']) ? $context->getConfig('note/search')['searchTitle'][$context->getLocale()] : $this->translate('search', 'ppit-core', $context->getLocale()));
	?>
	$('#mode-text').text((todo) ? '<?php echo $todoTitle ?>' : '<?php echo $searchTitle ?>');

	return params;
}

// Export the list
function exportNoteList(category) {

	$('#form_action').hide();

	var params = getParams();
	document.location.href = '<?php echo $this->url('note/export') ?>/' + category + params;
}

function eraseNoteSearch(category) {

<?php foreach ($context->getConfig('note/search')['main'] as $propertyId => $rendering) : ?>

	$('#form_action').hide();

	<?php if ($rendering == 'range' || $rendering == 'date') : ?>
	$('#search_min_<?php echo $propertyId ?>').val('');
	$('#search_max_<?php echo $propertyId ?>').val('');

	<?php else : ?>
	$('#search_<?php echo $propertyId ?>').val('');
	
	<?php endif;?>

<?php endforeach;?>

	getNoteList(category, getParams(), 'date', 'DESC');
}

function sortNoteList(category, criterion) {
	$('#form_action').hide();

	var dir;
	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (criterion + '-anchor' == ascCriterion) dir = 'DESC'; else dir = 'ASC';
	getNoteList(category, getParams(), criterion, dir);
}

function filterNoteList(category) {

	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (ascCriterion) {
		criterion = ascCriterion.split('-')[0];
		dir = 'ASC';
	}
	else {
		criterion = descCriterion.split('-')[0];
		dir = 'DESC';
	}
	getNoteList(category, getParams(), criterion, dir);
}

function connectNoteSearchInputs(category) {

	$('#export-button').click(function () { exportNoteList(category); });
	
	$('#erase-button').unbind();
	$('#erase-button').click(function () {Â eraseNoteSearch(category); });

<?php foreach ($context->getConfig('note/search')['main'] as $propertyId => $rendering) : ?>
	
	<?php if (
			$propertyId == 'category'
		||	$propertyId == 'level'
		||	$propertyId == 'school_subject'
		||	$propertyId == 'school_period'
		||	$propertyId == 'school_year'
		||	$propertyId == 'specialty') : ?>
	$('#search_<?php echo $propertyId ?>').change(function () { filterNoteList(category); });

	<?php elseif ($rendering == 'range') : ?>
	$('#search_min_<?php echo $propertyId ?>').keyup(function () { filterNoteList(category); });
	$('#search_max_<?php echo $propertyId ?>').keyup(function () { filterNoteList(category); });

	<?php elseif ($rendering == 'date') : ?>
	$("#search_min_<?php echo $propertyId ?>").datepicker();
	$("#search_max_<?php echo $propertyId ?>").datepicker();
	$('#search_min_<?php echo $propertyId ?>').change(function () { filterNoteList(category); });
	$('#search_max_<?php echo $propertyId ?>').change(function () { filterNoteList(category); });
	
	<?php elseif ($rendering == 'select') : ?>
		$('#search_<?php echo $propertyId ?>').change(function () { filterNoteList(category); });
	
	<?php else : ?>
		$('#search_<?php echo $propertyId ?>').keyup(function () { filterNoteList(category); });

	<?php endif;?>

<?php endforeach;?>
}

// Load the list
function getNoteList(category, params, major, dir) {		
	// Execute the ajax request
	route = '<?php echo $this->url('note/list') ?>/' + category + params + '&major=' + major + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC');
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById('note-list-panel').innerHTML = xhttp.responseText;
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});
			
			// Connect the sort anchors
			$('.ppit-sort-anchor').each(function () {
				$(this).click(function () {
					sortNoteList(category, $(this).attr('id').split('-')[0]);
				});
			});
			
			// Connect the detail anchors
			$('.note-detail-anchor').each(function () {
				$(this).click(function () {
					if (category == 'homework') getNoteUpdate($(this).attr('id').split('_')[1]);
					else if (category == 'evaluation') getEvaluationUpdate($(this).attr('id').split('_')[1]);
				});
			});
<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();
}

function connectAuditPanel()
{
	$('#audit-panel').hide();
	$('#audit-label').click(function () {
		if ($('#audit-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
			$('#audit-panel').show();
			$('#audit-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
		}
		else {
			$('#audit-panel').hide();
			$('#audit-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
		}
	});
}

<?php 
$properties = array();
$properties['class'] = array('type' => 'select', 'mandatory' => true);
$properties['subject'] = array('type' => 'select', 'mandatory' => true);
$properties['date'] = array('type' => 'date', 'mandatory' => true);
$properties['type'] = array('type' => 'select', 'mandatory' => true);
$properties['target_date'] = array('type' => 'date', 'mandatory' => true);
$properties['observations'] = array('type' => 'ckeditor', 'mandatory' => true, 'maxSize' => 2047);
$properties['document'] = array('type' => 'dropbox', 'mandatory' => false);
$properties['comment'] = array('type' => 'textarea', 'mandatory' => false, 'maxSize' => 2047);
$properties['update_time'] = array('type' => 'hidden');
echo $this->partial('/partials/check-update-properties', array('entity' => 'Note', 'context' => $context, 'properties' => $properties)) 
?>

function connectNoteUpdateForm(id)
{
	$('#input_date').datepicker();
	var form = document.getElementById('ppit-form');
	form.onsubmit = function(event) {
		
		event.preventDefault();

		// Check validity
		var validity = checkNoteUpdateProperties();

		if (validity) {

			// Create a new FormData object.
			var formData = new FormData();
			
			// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>
	<?php if ($property['type'] == 'ckeditor') : ?>
				formData.append('<?php echo $propertyId ?>', CKEDITOR.instances.<?php echo $propertyId ?>.getData());
	<?php else : ?>	
				formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);
	<?php endif;?>
<?php endforeach ?>

			var xhttp = new XMLHttpRequest();
			var route, target;
			route = '<?php echo $this->url('note/update') ?>/' + id;
			target = 'form_action';
			xhttp.open('POST', route, true);
			// Set up a handler for when the request finishes.
			xhttp.onload = function () {
				if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
					document.getElementById(target).innerHTML = xhttp.responseText;
					connectRemoveIcon('remove-anchor', 'form_action');
					connectAuditPanel();
					filterNoteList('homework');
				}
			};
			xhttp.send(formData);
		}
		else return false;
	}
}

function getNoteUpdate(id, action) {

	var xhttp = new XMLHttpRequest();
	var route = '<?php echo $this->url('note/update') ?>/' + id;
	if (action) route += '/' + action;

	xhttp.open('GET', route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			$('#form_action').show();
			$(location).attr('href', '#form_action');
			document.getElementById('form_action').innerHTML = xhttp.responseText;			
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});

			connectRemoveIcon('remove-anchor', 'form_action');
			connectAuditPanel();
			$('#subject').focus();
			
			$('#input_target_date_group').hide();
			if (action == 'update') {
				CKEDITOR.replace('observations');
				$('#type').change(function () { 
					if ($('#type').val() == 'done-work') {
						$('#input_target_date_group').hide();
						$('#observations_group').css('background-color', 'LightGreen');
					}
					else if ($('#type').val() == 'todo-work') {
						$('#input_target_date_group').show();
						$('#observations_group').css('background-color', 'LightSalmon');
					}
					else {
						$('#input_target_date_group').show();
						$('#observations_group').css('background-color', 'LightBlue');
					}
				});
			}

			connectNoteUpdateForm(id);

			if (id) {
				$('#update-anchor').click(function () { getNoteUpdate(id, 'update'); });
				$('#delete-anchor').click(function () { getNoteUpdate(id, 'delete'); });
			}
			else $('#add-anchor').click(function () { getNoteUpdate(id, 'add'); });

<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	$('#note-detail-anchor_' + id).removeClass("btn-default").addClass("btn-primary");
}

<?php 
$properties = array();
$properties['class'] = array('type' => 'select', 'mandatory' => true);
$properties['subject'] = array('type' => 'select', 'mandatory' => true);
$properties['date'] = array('type' => 'date', 'mandatory' => true);
$properties['reference_value'] = array('type' => 'number', 'mandatory' => true, 'minValue' => 0, 'maxValue' => 100);
$properties['weight'] = array('type' => 'number', 'mandatory' => true, 'minValue' => 0, 'maxValue' => 100);
$properties['observations'] = array('type' => 'textarea', 'mandatory' => false, 'maxSize' => 2047);
$properties['comment'] = array('type' => 'textarea', 'mandatory' => false, 'maxSize' => 2047);
$properties['update_time'] = array('type' => 'hidden');
echo $this->partial('/partials/check-update-properties', array('entity' => 'Evaluation', 'context' => $context, 'properties' => $properties)) 
?>

function connectEvaluationUpdateForm(id, action)
{
	$('#input_date').datepicker();
	var form = document.getElementById('ppit-form');
	form.onsubmit = function(event) {
		
		event.preventDefault();

		// Check validity
		var validity = true;
		if (action != 'delete') validity = checkEvaluationUpdateProperties();

		if (validity) {

			// Create a new FormData object.
			var formData = new FormData();

			if (action == 'delete') {
				formData.append('update_time', $('#update_time').val());
			}
			else {
				var accountNumber = $('#group-nb-account').val();
				for (var i = 0; i < accountNumber; i++) {
					account_id = $('#group-account_' + i).val();
					formData.append('account_' + i, account_id);
	
					value = $('#input_value_' + account_id).val();
					if (value != '') {
						error = checkNumber(value, 0, 100);
						if (error) {
							renderElement('input_value_' + account_id, error);
							validity = false;
						}
					    else { 
							renderElement('input_value_' + account_id, null);
							value = getNumber(value, 2);
							$('#value_' + account_id).val(value);
						}
					}
					
					formData.append('value_' + account_id, value);
					formData.append('assessment_' + account_id, $('#assessment_' + account_id).val());
				}
				formData.append('nb-account', accountNumber);
			
			// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>
					formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);
<?php endforeach ?>
			}

			var xhttp = new XMLHttpRequest();
			var route, target;
			route = '<?php echo $this->url('note/updateEvaluation') ?>/' + id;
			if (action) route += '/' + action;
			target = 'form_action';
			xhttp.open('POST', route, true);
			// Set up a handler for when the request finishes.
			xhttp.onload = function () {
				if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
					document.getElementById(target).innerHTML = xhttp.responseText;
					connectRemoveIcon('remove-anchor', 'form_action');
					connectAuditPanel();
					filterNoteList('evaluation');
				}
			};
			xhttp.send(formData);
		}
		else return false;
	}
}

function getEvaluationUpdate(id, action) {

	var xhttp = new XMLHttpRequest();
	var route = '<?php echo $this->url('note/updateEvaluation') ?>/' + id;
	if (action) route += '/' + action;

	xhttp.open('GET', route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			$('#form_action').show();
			$(location).attr('href', '#form_action');
			document.getElementById('form_action').innerHTML = xhttp.responseText;			
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});

			connectRemoveIcon('remove-anchor', 'form_action');
			connectAuditPanel();
			$('#subject').focus();

			connectEvaluationUpdateForm(id, action);

			if (id) {
				$('#update-anchor').click(function () { getEvaluationUpdate(id, 'update'); });
				$('#delete-anchor').click(function () { getEvaluationUpdate(id, 'delete'); });
			}
			else $('#add-anchor').click(function () { getEvaluationUpdate(id, 'add'); });

<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	$('#note-detail-anchor_' + id).removeClass("btn-default").addClass("btn-primary");
}

function activateNote(category) {

	<?php
	$todoTitle = (isset ($context->getConfig('note/search')['todoTitle']) ? $context->getConfig('note/search')['todoTitle'][$context->getLocale()] : $this->translate('active', 'ppit-core', $context->getLocale()));
	?>
	$('#mode-text').text('<?php echo $todoTitle ?>');
		
	// Connect the search inputs
	connectNoteSearchInputs(category);
	
	getNoteList(category, '?', 'date', 'DESC');
}

function activateEvaluation() {

	// Load the search panel and highlight the menu entry
	loadPanel('index_action', '<?php echo $this->url('note/search', array('category' => 'evaluation')) ?>');
	$('.menu-btn').removeClass("btn-primary").addClass("btn-default");
	var evaluationAnchor;
	evaluationAnchor = '#evaluation-anchor';
	$(evaluationAnchor).removeClass("btn-default").addClass("btn-primary");

	activateNote('evaluation');
}

function activateHomework() {

	// Load the search panel and highlight the menu entry
	loadPanel('index_action', '<?php echo $this->url('note/search', array('category' => 'homework')) ?>');
	$('.menu-btn').removeClass("btn-primary").addClass("btn-default");
	var homeworkAnchor;
	homeworkAnchor = '#homework-anchor';
	$(homeworkAnchor).removeClass("btn-default").addClass("btn-primary");

	activateNote('homework');
}
