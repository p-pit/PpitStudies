<!-- 
/**
 * PpitCore V1.0 (https://github.com/p-pit/PpitCore)
 *
 * @link      https://github.com/p-pit/PpitCore
 * @copyright Copyright (c) 2016 Bruno Lartillot
 * @license   https://github.com/p-pit/PpitCore/blob/master/license.txt GNU-GPL license
 */
-->

<?php echo $this->partial('/partials/search-scripts-v2') ?>
<?php echo $this->partial('/ppit-core/view-controller/document', ['type' => 'binary', 'folder' => 'studies']) ?>

<script>

var criterion = 'date', dir = 'DESC';

// Export the list
function exportNoteList() {
	var params = getSearchParams('');
	document.location.href = '<?php echo $this->url('note/export', array('category' => $category, 'type' => $type)) ?>' + params + '&major=' + criterion + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC');
}

// Load the list
function getNoteList(params) {
	// Execute the ajax request
	route = '<?php echo $this->url('note/listV2', array('category' => $category, 'type' => $type)) ?>' + params + '&major=' + criterion + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC') + '&limit=' + $('#limit').val();
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4 && xhttp.status == 200) {
			$('#note-list-panel').html(xhttp.responseText);

            $('#export-button').click(function () { exportAbsenceList(); });
      
            // Connect the sort anchors
            $('.sort_anchor').click(function () {
              criterion = $(this).attr('id').split('-')[0];
              ascCriterion = $('.sort_anchor_up').attr('id');
              descCriterion = $('.sort_anchor_down').attr('id');
              if (criterion + '-anchor' == ascCriterion) dir = 'DESC';
              else if (criterion + '-anchor' == descCriterion) dir = 'ASC';
              else dir = 'ASC';
              getNoteList(getSearchParams(''));
            });
      
            // Connect the detail anchors
            $('.note-detail-anchor').click(function () {
              var id = $(this).attr('id').split('_')[1];
              if ('<?php echo $category ?>' == 'homework') getNoteUpdate(id);
              else if ('<?php echo $category ?>' == 'evaluation') getNoteEvaluation(id);
              $(this).removeClass("btn-outline-primary").addClass("btn-primary");
              $('#modalForm').modal('toggle');
            });
		}
	}
	xhttp.send();
}

$('#modalForm').on('hidden.bs.modal', function (e) {
  $('.note-update-anchor').addClass("btn-outline-primary").removeClass("btn-primary");
  getNoteList(getSearchParams(''));
})

function connectAuditPanel()
{
	$('#audit-panel').hide();
	$('#audit-label').click(function () {
		if ($('#audit-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
			$('#audit-panel').show();
			$('#audit-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
		}
		else {
			$('#audit-panel').hide();
			$('#audit-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
		}
	});
}

<?php 
$properties = array();
$properties['place_id'] = array('type' => 'select', 'mandatory' => true);
$properties['class'] = array('type' => 'select', 'mandatory' => true);
$properties['school_period'] = array('type' => 'select', 'mandatory' => true);
//$properties['teacher_n_fn'] = array('type' => 'text', 'mandatory' => true);
$properties['teacher_id'] = array('type' => 'select', 'mandatory' => true);
$properties['level'] = array('type' => 'select', 'mandatory' => false);
$properties['subject'] = array('type' => 'select', 'mandatory' => true);
$properties['date'] = array('type' => 'date', 'mandatory' => true);
$properties['reference_value'] = array('type' => 'number', 'mandatory' => true, 'minValue' => 0, 'maxValue' => 100);
$properties['weight'] = array('type' => 'number', 'mandatory' => true, 'minValue' => 0, 'maxValue' => 100);
$properties['observations'] = array('type' => 'textarea', 'mandatory' => false, 'maxSize' => 2047);
$properties['comment'] = array('type' => 'textarea', 'mandatory' => false, 'maxSize' => 2047);
$properties['update_time'] = array('type' => 'hidden');
echo $this->partial('/partials/check-update-properties', array('entity' => 'Evaluation', 'context' => $context, 'properties' => $properties)) 
?>

function postNoteEvaluation(id)
{
    var xhttp = new XMLHttpRequest();
    var route = '<?php echo $this->url('note/evaluation') ?>/' + type + '?group_id=' + $('#search-groups').val();
    route += '&accounts=';
    let first = true;
    $('.account-checkbox').each(function () {
      let account_id = $(this).attr('id').split('_')[1];
      if ($(this).prop('checked')) {
        if (!first) route += ',';
        first = false;
        route += account_id;
      }
    });

    var formData = new FormData();
    $('.update_input').each(function () {
      let val = $(this).val();
      if ($(this).hasClass('update_input_date')) val = encodeDate(val);
      if ($(this).hasClass('update_input_number')) val = getNumber(val, 2);
      formData.append($(this).attr('id'), val);
    });

    xhttp.open('POST', route, true);
    xhttp.onload = function () {
      if (xhttp.readyState == 4) {
        if (xhttp.status == 200) {
          $('#grouped-action-panel').html(xhttp.responseText);
        }
        else {
          toastr.error("<?php echo $this->translate('A technical error has occured. PLease try again later', 'ppit-core', $context->getLocale()) ?>\nTechnical information: " + xhttp.status + ' - ' + xhttp.statusText);
        }
      }
  };
  xhttp.send(formData);
}

function deleteEvaluation(id)
{
}

function getNoteEvaluation(id) {

	var xhttp = new XMLHttpRequest();
	var route = '<?php echo $this->url('note/evaluation', ['type' => $type]) ?>/' + id;

	xhttp.open('GET', route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4 && xhttp.status == 200) {
			$('#note-update-panel').html(xhttp.responseText);			
			connectAuditPanel();
            $('#date').datepicker();
			$('#subject').focus();

			if ($('#note_type').val() == 'report') {
				if ($('#subject').val() != 'global') {
					$('.select_value').hide();
				}
				$('#subject').change(function () { 
					if ($('#subject').val() == 'global') {
						$('.select_value').show();
					}
					else {
						$('.select_value').hide();
					}
				});
			}
	        
			$('.note_evaluation_delete_button').click(function() {
              $('.note_evaluation_delete_button').removeClass('btn-outline-primary').addClass('btn-danger');
              $('.note_evaluation_delete_button').unbind().click(function(event) { deleteEvaluation(id); });
            });

            $('[data-toggle="tooltip"]').tooltip();

            var form = document.getElementById('ppit-form');
            form.onsubmit = function(event) { 
              event.preventDefault();
              postNoteEvaluation(id);
            };
		}
	}
	xhttp.send();
}

function getSearch() {

	// Load the search panel and highlight the menu entry
    let xhttp = new XMLHttpRequest();
    xhttp.open("GET", '<?php echo $this->url('note/searchV2', array('category' => $category, 'type' => $type)) ?>', true);
    xhttp.onreadystatechange = function() {
      if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
      if (xhttp.readyState == 4 && xhttp.status == 200) {
          $('#index-panel').html(xhttp.responseText);
      	
          $('#erase-button').click(function () {Â 
            $('.search_selectpicker').selectpicker('refresh');
            $('.search_check_value').val('0');
            $('.search_check').removeClass('btn-secondary').addClass('btn-default').removeClass('active');
            $('#erase-button').removeClass('btn-success').addClass('btn-default');
            $('#erase-button').attr('disabled', 'disabled');
            getNoteList(getSearchParams(''));
          });
          
          $('.search_selectpicker').selectpicker('refresh');
          
          // Connect the date picker on date inputs
          $('.search_input_date').datepicker();
     
          // Trigger the change event on search inputs and refresh the list
          $('.search_input').change(function () {
            if ($(this).attr('id')) {
              var propertyId = $(this).attr('id').split('-')[1];
              $('#erase-button').removeClass('btn-default').addClass('btn-success');
              $('#erase-button').attr('disabled', false);
              $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
              $('#search_check_value-' + propertyId).val('1');
              getNoteList(getSearchParams(''));
            }
          }); 

          // Trigger the keyup event on search inputs and refresh the list
          $('.search_input').keyup(function () {
            if ($(this).attr('id')) {
              if ($(this).val().length > 2) {
                var propertyId = $(this).attr('id').split('-')[1];
                $('#erase-button').removeClass('btn-default').addClass('btn-success');
                $('#erase-button').attr('disabled', false);
                $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
                $('#search_check_value-' + propertyId).val('1');
                getNoteList(getSearchParams(''));
              }
            }
          });

          // Trigger the click event on per-property checks (allowing to search on empty values) and refresh the list
          $('.search_check').click(function() {
            $('#erase-button').removeClass('btn-default').addClass('btn-success');
            $('#erase-button').attr('disabled', false);
            var propertyId = $(this).attr('id').split('-')[1], check = 'search_check_value-' + propertyId;
            if ($('#' + check).val() == '1') {
              $(this).removeClass('btn-secondary').addClass('btn-default').removeClass('active');
              $('#' + check).val('0');
              $('#search-' + propertyId).val('');
              $('#search_min-' + propertyId).val('');
              $('#search_max-' + propertyId).val('');
            }
            else {
              $(this).removeClass('btn-default').addClass('btn-secondary').addClass('active');
              $('#' + check).val('1');
            }
            getNoteList(getSearchParams(''));
          });

          $('#export-button').click(function () {
       	    document.location.href = '<?php echo $this->url('note/export', array('category' => $category, 'type' => $type)) ?>' + getSearchParams('');
          });

          getNoteList(getSearchParams(''));
      }
    };
    xhttp.send();
}

getSearch();

</script>